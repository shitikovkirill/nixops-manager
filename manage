#! /usr/bin/env nix-shell
#! nix-shell -I nixpkgs-overlays=./overlays
#! nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/20.09-beta.tar.gz
#! nix-shell -i bash -p nixops which jq nix openssl openssh


# A NixOps Wrapper for Git Projects
# ---------------------------------
# Modified from repo: https://github.com/grafted-in/nixops-manager
# This assumes there is a file ./stage/stage.nixops where this state is being stored.
#
# Use `./manage --help` to see normal NixOps help.
# Use `./manage {deployment} command` to user normal NixOps commands.
# Use `./manage {deployment} .shell` to open a Nix shell where the environment is set up to use
# `nixops` directly with the same behavior as running `./manage` commands.

set -e

here=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

deployment="$1"
command="$2"
state_file="$here/secrets/${deployment}.nixops"

export NIX_PATH=nixpkgs-overlays=./overlays:nixpkgs=$(nix-instantiate --eval ./nixpkgs.nix | tr -d '"' ):./${deployment}

export NIXOPS_STATE="$state_file"
export NIXOPS_DEPLOYMENT="$deployment"
export BOTO_USE_ENDPOINT_HEURISTICS=True

if [[ $deployment == --* ]]; then
  nixops "$@"
  exit $?
elif [ "$command" == ".shell" ]; then
    exec nix-shell -p nixops --command "echo You may now run commands for deployment:$deploymnet with \\'nixops\\' ; return "
elif [ ! -e "$state_file" ] && [ "$command" != "create" ]; then
  >&2 echo "You're trying to use a deployment that doesn't exist yet. Try running $0 $deployment create"
  exit 1
elif [ -e "$state_file" ] && [ "$command" == "create" ]; then
  >&2 echo "You're trying to create a deployment that already exists."
  exit 1
else
  nixops "${@:2}"
fi
